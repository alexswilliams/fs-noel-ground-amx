PROGRAM_NAME='Framestore-Master'

#include 'Touchpanel.axi'
#include 'Marantz6008.axi'
#include 'LG_RS232.axi'
#include 'ClearOneInteractPro.axi'
#include 'AppleTV.axi'
#include 'Vidyo.axi'
#include 'SonyCam.axi'


DEFINE_VARIABLE
    INTEGER PHONEBOOK_PAGE = 0
    INTEGER USER_IS_CONTROLLING_VOLUME_SLIDER = 0
    INTEGER USER_IS_CONTROLLING_MICGAIN_SLIDER = 0
    

DEFINE_FUNCTION REDRAW_PHONEBOOK() {
    stack_var integer index
    stack_var integer btn
    index = PHONEBOOK_PAGE * 8
    
    for (btn = 0; btn < 8; btn = btn + 1) {
	if (btn + index < CLEARONE_PHONEBOOK_LENGTH) {
	    TP_BUTTON_TEXT(btn + TP_CALL_PRESET_0, CLEARONE_PHONEBOOK[btn+index+1].NAME)
	} else {
	    TP_BUTTON_TEXT(btn + TP_CALL_PRESET_0, '--')
	}
    }
}

DEFINE_FUNCTION REDRAW_MATRIX() {
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMCALL_TOSPEAKERS, CLEARONE_MATRIX[CLEARONE_MATRIX_CALL][CLEARONE_MATRIX_SPEAKERS]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMCALL_TOVIDYO, CLEARONE_MATRIX[CLEARONE_MATRIX_CALL][CLEARONE_MATRIX_VIDYO]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMMICS_TOCALL, CLEARONE_MATRIX[CLEARONE_MATRIX_MICS][CLEARONE_MATRIX_CALL]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMMICS_TOSPEAKERS, CLEARONE_MATRIX[CLEARONE_MATRIX_MICS][CLEARONE_MATRIX_SPEAKERS]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMMICS_TOVIDYO, CLEARONE_MATRIX[CLEARONE_MATRIX_MICS][CLEARONE_MATRIX_VIDYO]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMVIDYO_TOCALL, CLEARONE_MATRIX[CLEARONE_MATRIX_VIDYO][CLEARONE_MATRIX_CALL]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMVIDYO_TOSPEAKERS, CLEARONE_MATRIX[CLEARONE_MATRIX_VIDYO][CLEARONE_MATRIX_SPEAKERS]+1)
    TP_BUTTON_SETSTATE(TP_CALL_ROUTING_FROMMICS_TOPC, CLEARONE_MATRIX[CLEARONE_MATRIX_MICS][CLEARONE_MATRIX_PC]+1)
}


DEFINE_FUNCTION INTEGER CX(DEV device, CHAR event[], DEV desiredDev, CHAR desiredEvent[]) {
    if ((device == desiredDev) and
	(COMPARE_STRING(event, desiredEvent) == 1)) {
	return 1
    }
    return 0
}


DEFINE_FUNCTION CALLBACK (DEV device, CHAR event[], CHAR paramStr[], INTEGER paramInt) {
    if (device == dvTV) {
	if (COMPARE_STRING(event, 'POWER') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_TV_POWER, paramStr)
	    if (paramInt == 1) {
		TP_BUTTON_SHOW(TP_POWER)
		TP_BUTTON_OFF(TP_POWER)
		TP_BUTTON_SHOW(TP_SCREENBLANK)
	    } else {
		if (AVR_STATE_POWER == AVR_STATE_POWER_OFF) { TP_BUTTON_HIDE(TP_POWER) }
		TP_BUTTON_HIDE(TP_SCREENBLANK)
	    }
	    return
	}
	if (COMPARE_STRING(event, 'BLANK') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_TV_BLANK, paramStr)
	    if (paramInt == 1) { TP_BUTTON_ON(TP_SCREENBLANK) } else { TP_BUTTON_OFF(TP_SCREENBLANK) }
	    return
	}
	if (COMPARE_STRING(event, 'INPUT') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_TV_INPUT, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'MUTE') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_TV_MUTE, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'ASPECT') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_TV_ASPECT, paramStr)
	    return
	}
    	return // short-circuit AVR
    }
    
    
    
    
    if (device == dvAVR) {
	if (COMPARE_STRING(event, 'INPUT') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_INPUT, paramStr)
	    //SEND_STRING 0:0:0, "'INPUT - ',paramStr,itoa(paramInt)"
	    switch (paramInt) {
		case 1: { TP_SELECT_INPUT(TP_CALL) }	// Phono
		case 3: { TP_SELECT_INPUT(TP_APPLETV) }	// DVD
		case 6: { TP_SELECT_INPUT(TP_SKYPE) }	// Satellite / Cable
		case 7: { TP_SELECT_INPUT(TP_VGA) }	// Media Player
		case 8: { TP_SELECT_INPUT(TP_HDMI) }	// Game
		case 18: { TP_SELECT_INPUT(TP_VIDYO) }	// Aux 2 (rear)
		//case 2: {  }				// CD
		//case 4: {  }				// Blu-ray
		//case 5: {  }				// TV
		//case 17: {  }				// Aux 1 (front)
		default: { TP_SELECT_INPUT_NONE() }
	    }
	    return
	}
	if (COMPARE_STRING(event, 'MUTE') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_MUTE, paramStr)
	    if (paramInt == 1) { TP_BUTTON_ON(TP_MUTE) } else { TP_BUTTON_OFF(TP_MUTE) }
	    return
	}
	if (COMPARE_STRING(event, 'VOLUME') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_VOLUME, paramStr)
	    if (USER_IS_CONTROLLING_VOLUME_SLIDER == 0) {
		SEND_LEVEL dvTP, TP_VOLUME, paramInt
	    }
	    return
	}
	if (COMPARE_STRING(event, 'POWER') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_POWER, paramStr)
	    if (paramInt == 1) {
		TP_BUTTON_SHOW(TP_POWER)
		TP_BUTTON_SHOW(TP_MUTE)
		TP_BUTTON_SHOW(TP_VOLUME)
	    } else {
		if (TV_STATE_POWER == TV_STATE_POWER_OFF) { TP_BUTTON_HIDE(TP_POWER) }
		TP_BUTTON_HIDE(TP_MUTE)
		TP_BUTTON_HIDE(TP_VOLUME)
		TP_SELECT_INPUT_NONE()
	    }
	    return
	}
	if (COMPARE_STRING(event, 'SURROUND') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_SURROUND, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'PICTUREMODE') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_PICTURE, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'AUDIOSOURCE') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_AUDIO, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'OUTPUTRESOLUTION') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_OUTRES, paramStr)
	    return
	}
	if (COMPARE_STRING(event, 'RESOLUTION') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_AVR_SETRES, paramStr)
	    return
	}
	return // short-circuit AVR
    }
    
    
    
    
    if (device == dvClearOne) {
	if (COMPARE_STRING(event, 'PHONEBOOK_UPDATE') == 1) {
	    REDRAW_PHONEBOOK()
	}
	if (COMPARE_STRING(event, 'PHONE_HOOK') == 1) {
	    CURRENTLY_IN_CALL = paramInt
	    TP_BUTTON_TEXT(TP_INFO_CO_OFFHOOK, paramStr)
	    if (CURRENTLY_IN_CALL == 1) {
		TP_BUTTON_SHOW(TP_CALLDUR)
		TP_BUTTON_SHOW(TP_ENDCALL)
		TP_BUTTON_OFF(TP_CALL_DIAL_CALL)
		TP_BUTTON_OFF(TP_CALL_PRESETS_CALL)
		TP_BUTTON_ON(TP_CALL_DIAL_END)
		TP_BUTTON_ON(TP_CALL_PRESETS_END)
	    } else {
		TP_BUTTON_HIDE(TP_CALLDUR)
		TP_BUTTON_HIDE(TP_ENDCALL)
		TP_BUTTON_ON(TP_CALL_DIAL_CALL)
		TP_BUTTON_ON(TP_CALL_PRESETS_CALL)
		TP_BUTTON_OFF(TP_CALL_DIAL_END)
		TP_BUTTON_OFF(TP_CALL_PRESETS_END)
	    }
	}
	if (COMPARE_STRING(event, 'DIALOUT') == 1) {
	    TP_BUTTON_TEXT(TP_INFO_CO_LASTNUM, paramStr)
	}
	if (COMPARE_STRING(event, 'CALLDUR') == 1) {
	    stack_var char h[2]
	    stack_var char m[2]
	    stack_var char s[2]
	    if (CLEARONE_TimeConnected.Hours < 10) { h = "'0',CLEARONE_TimeConnected.Hours+'0'" } else { h = itoa(CLEARONE_TimeConnected.Hours) }
	    if (CLEARONE_TimeConnected.Minutes < 10) { m = "'0',CLEARONE_TimeConnected.Minutes+'0'" } else { m = itoa(CLEARONE_TimeConnected.Minutes) }
	    if (CLEARONE_TimeConnected.Seconds < 10) { s = "'0',CLEARONE_TimeConnected.Seconds+'0'" } else { s = itoa(CLEARONE_TimeConnected.Seconds) }
 	    TP_BUTTON_TEXT(TP_CALLDUR, "h,':',m,':',s")
 	    TP_BUTTON_TEXT(TP_INFO_CO_CALLDUR, "h,':',m,':',s")
	}
	if (COMPARE_STRING(event, 'MUTE') == 1) {
	    
	}
	if (COMPARE_STRING(event, 'MICMUTE') == 1) {
 	    TP_BUTTON_TEXT(TP_INFO_CO_MUTE, itoa(paramInt))
	    TP_BUTTON_SETSTATE(TP_CALL_DIAL_MUTE, paramInt+1)
	    TP_BUTTON_SETSTATE(TP_CALL_PRESETS_MUTE, paramInt+1)
	}
	if (COMPARE_STRING(event, 'PHONEBOOK_COUNT') == 1) {
 	    TP_BUTTON_TEXT(TP_INFO_CO_PHONEBOOK, itoa(paramStr))
	}
	if (COMPARE_STRING(event, 'PHONEBOOK') == 1) {
	    
	}
	if (COMPARE_STRING(event, 'AUTO_ANSWER') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_AUTOANSWER, paramInt+1)
	}
	if (COMPARE_STRING(event, 'ACCOUSTIC_ECHO_CANCELLATION') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_ECHOCANCELLATION, paramInt+1)
	}
	if (COMPARE_STRING(event, 'AUTOMATIC_GAIN_CONTROL') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_AUTOMATICMICGAIN, paramInt+1)
	}
	if (COMPARE_STRING(event, 'COMPRESSION') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_INPUTCOMPRESSION, paramInt+1)
	}
	if (COMPARE_STRING(event, 'NOISE_CANCELLATION') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_NOISECANCELLATION, paramInt+1)
	}
	if (COMPARE_STRING(event, 'DECAY') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_MICGATEDECAY, paramInt)
	}
	if (COMPARE_STRING(event, 'RINGER_ENABLED') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_RINGERENABLE, paramInt+1)
	}
	if (COMPARE_STRING(event, 'CLEAR_EFFECT') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_TELCOCLEAREFFECT, paramInt+1)
	}
	if (COMPARE_STRING(event, 'TELCO_LEVEL_CONTROL') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_TELCOAUTOLEVELCONTROL, paramInt+1)
	}
	if (COMPARE_STRING(event, 'TELCO_LOOPBACK_ECHO_CANCELLATION') == 1) {
	    TP_BUTTON_SETSTATE(TP_CALL_SETTINGS_TELCOECHOCANCELLATION, paramInt+1)
	}
	if (COMPARE_STRING(event, 'VOLUME') == 1) {
	    if (USER_IS_CONTROLLING_MICGAIN_SLIDER == 0) {
		SEND_LEVEL dvTP, TP_CALL_SETTINGS_MICGAIN, paramInt
	    }
	}
	if (COMPARE_STRING(event, 'MATRIX_UPDATE') == 1) {
	    REDRAW_MATRIX()
	}
	if (COMPARE_STRING(event, 'MATRIX') == 1) {
	    REDRAW_MATRIX()
	}
	if (COMPARE_STRING(event, 'RING') == 1) {
	    if (paramInt == 0) { return }
	    SEND_COMMAND dvTP, '@PPN-Ringing'
	    SEND_COMMAND dvTP, 'WAKE'
	    SEND_COMMAND dvTP, '@SOU-phonecall.wav'
	    if (AVR_STATE_POWER == AVR_STATE_POWER_OFF) {
		AVR_TURN_ON_AND_SET_INPUT(AVR_PHONO)
	    }
	}
    }
}


DEFINE_EVENT
    
    LEVEL_EVENT[dvTP, TP_VOLUME] {
	if (USER_IS_CONTROLLING_VOLUME_SLIDER == 1) {
	    AVR_ZONE1_VOL_SET(level.value)
	}
    }
    
    LEVEL_EVENT[dvTP, TP_CALL_SETTINGS_MICGAIN] {
	if (USER_IS_CONTROLLING_MICGAIN_SLIDER == 1) {
	    CLEARONE_MICGAIN(level.value)
	}
    }
    
    BUTTON_EVENT[dvTP, 0] {
	RELEASE: {
	    if ((button.input.channel > 400) and (button.input.channel < 500)) {
		{ OFF[dvVidyo, button.input.channel - 400] }
	    }
	    if ((button.input.channel > 800) and (button.input.channel < 900)) {
		{ OFF[dvCam, button.input.channel - 800] }
	    }
	    
	    SWITCH (button.input.channel) {
		CASE TP_VOLUME: { WAIT 2 { USER_IS_CONTROLLING_VOLUME_SLIDER = 0 } }
		CASE TP_CALL_SETTINGS_MICGAIN: { WAIT 2 { USER_IS_CONTROLLING_MICGAIN_SLIDER = 0 } }
		
		CASE TP_ATV_UP: { OFF[dvATV, ATV_IR_UP] }
		CASE TP_ATV_DOWN: { OFF[dvATV, ATV_IR_DOWN] }
		CASE TP_ATV_LEFT: { OFF[dvATV, ATV_IR_LEFT] }
		CASE TP_ATV_RIGHT: { OFF[dvATV, ATV_IR_RIGHT] }
		CASE TP_ATV_MENU: { OFF[dvATV, ATV_IR_MENU] }
		CASE TP_ATV_OK: { OFF[dvATV, ATV_IR_OK] }
		CASE TP_ATV_PLAYPAUSE: { OFF[dvATV, ATV_IR_PLAYPAUSE] }
	    }
	}
	PUSH: {
	    if ((button.input.channel > 400) and (button.input.channel < 500)) {
		{ ON[dvVidyo, button.input.channel - 400] }
	    }
	    if ((button.input.channel > 800) and (button.input.channel < 900)) {
		{ ON[dvCam, button.input.channel - 800] }
	    }
	    SWITCH (button.input.channel) {
		CASE TP_VOLUME: { USER_IS_CONTROLLING_VOLUME_SLIDER = 1 }
		CASE TP_CALL_SETTINGS_MICGAIN: { USER_IS_CONTROLLING_MICGAIN_SLIDER = 1 }
		
		CASE TP_ACCEPT_CALL: {
		    CLEARONE_CALL_ANSWER()
		    AVR_TURN_ON_AND_SET_INPUT(AVR_PHONO)
		}
		case TP_DECLINE_CALL: {
		    CLEARONE_CALL_IGNORE()
		}
		
		CASE TP_CALL_DIAL_0:
		CASE TP_CALL_DIAL_1:
		CASE TP_CALL_DIAL_2:
		CASE TP_CALL_DIAL_3:
		CASE TP_CALL_DIAL_4:
		CASE TP_CALL_DIAL_5:
		CASE TP_CALL_DIAL_6:
		CASE TP_CALL_DIAL_7:
		CASE TP_CALL_DIAL_8:
		CASE TP_CALL_DIAL_9:
		CASE TP_CALL_DIAL_STAR:
		CASE TP_CALL_DIAL_HASH: { 
		    if (CURRENTLY_IN_CALL == 1) {
			if (TP_CALL_DIAL_HASH == button.input.channel) { CLEARONE_DIAL('#') }
			else if (TP_CALL_DIAL_STAR == button.input.channel) { CLEARONE_DIAL('*') }
			else { CLEARONE_DIAL("(button.input.channel - TP_CALL_DIAL_0 + '0')") }
		    } else {
			CURRENT_PHONE_NUMBER_APPEND(button.input.channel - TP_CALL_DIAL_0)
		    }
		}
		CASE TP_CALL_DIAL_BACKSPACE: { CURRENT_PHONE_NUMBER_BACKSPACE() }
		CASE TP_CALL_DIAL_CLEAR: { CURRENT_PHONE_NUMBER_CLEAR() }
		
		CASE TP_CALL_PRESETS_CALL:
		CASE TP_CALL_DIAL_CALL: { CLEARONE_DIAL(CURRENT_PHONE_NUMBER) }
		CASE TP_ENDCALL:
		CASE TP_CALL_PRESETS_END:
		CASE TP_CALL_DIAL_END: {
		    CLEARONE_ENDCALL()
		    CURRENT_PHONE_NUMBER_CLEAR()
		}
		CASE TP_CALL_PRESETS_REDIAL:
		CASE TP_CALL_DIAL_REDIAL: { CLEARONE_REDIAL() }
		CASE TP_CALL_PRESETS_MUTE:
		CASE TP_CALL_DIAL_MUTE: { CLEARONE_MUTE_MICS(CLEARONE_MUTE_TOGGLE) }
		
		CASE TP_CALL_PRESET_0:
		CASE TP_CALL_PRESET_1:
		CASE TP_CALL_PRESET_2:
		CASE TP_CALL_PRESET_3:
		CASE TP_CALL_PRESET_4:
		CASE TP_CALL_PRESET_5:
		CASE TP_CALL_PRESET_6:
		CASE TP_CALL_PRESET_7: {
		    stack_var integer i
		    i = button.input.channel - TP_CALL_PRESET_0
		    i = i + (PHONEBOOK_PAGE * 8)
		    if (i <= CLEARONE_PHONEBOOK_LENGTH) {
			CURRENT_PHONE_NUMBER_SET(CLEARONE_PHONEBOOK[i+1].NUMBER)
		    }
		}
		CASE TP_CALL_PRESET_PREVPAGE: {
		    PHONEBOOK_PAGE = 0
		    TP_BUTTON_HIDE(TP_CALL_PRESET_PREVPAGE)
		    TP_BUTTON_SHOW(TP_CALL_PRESET_NEXTPAGE)
		    REDRAW_PHONEBOOK()
		}
		CASE TP_CALL_PRESET_NEXTPAGE: {
		    PHONEBOOK_PAGE = 1
		    TP_BUTTON_SHOW(TP_CALL_PRESET_PREVPAGE)
		    TP_BUTTON_HIDE(TP_CALL_PRESET_NEXTPAGE)
		    REDRAW_PHONEBOOK()
		}
		
		CASE TP_CALL_SETTINGS_AUTOANSWER: { CLEARONE_AUTOANSWER(2) }
		CASE TP_CALL_SETTINGS_AUTOMATICMICGAIN: { CLEARONE_AUTOMATICGAIN(2) }
		CASE TP_CALL_SETTINGS_ECHOCANCELLATION: { CLEARONE_ECHOCANCELLATION(2) }
		CASE TP_CALL_SETTINGS_INPUTCOMPRESSION: { CLEARONE_INPUTCOMPRESSION(2) }
		CASE TP_CALL_SETTINGS_MICGATEDECAY: {
		    switch (CLEARONE_MICGATE_LAST) { 
			case 1: { CLEARONE_MICROPHONEDECAY(2) }
			case 2: { CLEARONE_MICROPHONEDECAY(3) }
			case 3: { CLEARONE_MICROPHONEDECAY(1) }
		    }
		}
		CASE TP_CALL_SETTINGS_NOISECANCELLATION: { CLEARONE_NOISECANCELLATION(2) }
		CASE TP_CALL_SETTINGS_RINGERENABLE: { CLEARONE_RINGER(2) }
		CASE TP_CALL_SETTINGS_TELCOAUTOLEVELCONTROL: { CLEARONE_TELCOLEVELCONTROL(2) }
		CASE TP_CALL_SETTINGS_TELCOCLEAREFFECT: { CLEARONE_CLEAREFFECT(2) }
		CASE TP_CALL_SETTINGS_TELCOECHOCANCELLATION: { CLEARONE_TELCOECHOCANCELLATION(2) }
		
		
		CASE TP_CALL_ROUTING_FROMCALL_TOSPEAKERS: {
		    CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_CALL_TO_SPEAKER_LEFT)
		    CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_CALL_TO_SPEAKER_RIGHT)
		}
		CASE TP_CALL_ROUTING_FROMCALL_TOVIDYO: { CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_CALL_TO_VIDYO)  }
		CASE TP_CALL_ROUTING_FROMMICS_TOCALL: { CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_MICS_TO_CALL)  }
		CASE TP_CALL_ROUTING_FROMMICS_TOPC: { CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_MICS_TO_PC)  }
		CASE TP_CALL_ROUTING_FROMMICS_TOVIDYO: { CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_MICS_TO_VIDYO)  }
		CASE TP_CALL_ROUTING_FROMVIDYO_TOCALL: { CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_VIDYO_TO_CALL)  }
		CASE TP_CALL_ROUTING_FROMVIDYO_TOSPEAKERS: {
		    CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_VIDYO_TO_SPEAKER_LEFT)
		    CLEARONE_ROUTING_TOGGLE(CLEARONE_MATRIX_VIDYO_TO_SPEAKER_RIGHT)
		}
		CASE TP_CALL_ROUTING_RESET: { CLEARONE_ROUTING_CLEAR_TO_DEFAULTS() }
		
		
		CASE TP_ATV_UP: { ON[dvATV, ATV_IR_UP] }
		CASE TP_ATV_DOWN: { ON[dvATV, ATV_IR_DOWN] }
		CASE TP_ATV_LEFT: { ON[dvATV, ATV_IR_LEFT] }
		CASE TP_ATV_RIGHT: { ON[dvATV, ATV_IR_RIGHT] }
		CASE TP_ATV_MENU: { ON[dvATV, ATV_IR_MENU] }
		CASE TP_ATV_OK: { ON[dvATV, ATV_IR_OK] }
		CASE TP_ATV_PLAYPAUSE: { ON[dvATV, ATV_IR_PLAYPAUSE] }
		
		CASE TP_HELP1_TURNONTV: {
		    TV_POWER_ON()
		    WAIT 50 {
			TV_BLANK_OFF()
			WAIT 10 { TV_INPUT(TV_IN_HDMI_DTV_AUTO_INPUT_1) }
			WAIT 30 { TV_MISC(TV_MISC_OSD_OFF) }
			WAIT 40 { TV_MUTE_ON() }
		    }
		}
		CASE TP_HELP1_TURNONAVR: {
		    AVR_ZONE1_ON()
		    WAIT 50 {
			AVR_ZONE1_VOL_SET(50)
			AVR_INPUT(AVR_GAME)
			AVR_MUTE_OFF()
			AVR_PM(AVR_PM_CUSTOM)
			AVR_SURROUND(AVR_SUR_STEREO)
		    }
		}
		CASE TP_HELP1_CALL: {
		    if (CLEARONE_PHONEBOOK_LENGTH >= 1) {
			AVR_TURN_ON_AND_SET_INPUT(AVR_PHONO)
			CLEARONE_DIAL(CLEARONE_PHONEBOOK[1].NUMBER)
		    }
		}
		
		CASE TP_CALL: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_PHONO)
		    TV_POWER_OFF()
		    //TV_POWER_ON()
		}
		CASE TP_SKYPE: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_SATCBL)
		    TV_POWER_ON()
		}
		CASE TP_VIDYO: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_AUX2)
		    TV_POWER_ON()
		}
		CASE TP_APPLETV: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_DVD)
		    TV_POWER_ON()
		}
		CASE TP_HDMI: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_GAME)
		    TV_POWER_ON()
		}
		CASE TP_VGA: {
		    AVR_TURN_ON_AND_SET_INPUT(AVR_MPLAY)
		    TV_POWER_ON()
		}
		
		CASE TP_POWER: {
		    AVR_ZONE1_OFF()
		    TV_POWER_OFF()
		}
		CASE TP_SCREENBLANK: {
		    if (TV_STATE_BLANK == TV_STATE_BLANK_OFF) {
			TV_BLANK_ON()
			TP_BUTTON_ON(TP_SCREENBLANK)
		    } else {
			TV_BLANK_OFF()
			TP_BUTTON_OFF(TP_SCREENBLANK)
		    }
		}
		CASE TP_MUTE: {
		    if (AVR_STATE_MUTE == AVR_STATE_MUTE_OFF) {
			AVR_MUTE_ON()
			TP_BUTTON_ON(TP_MUTE)
		    } else {
			AVR_MUTE_OFF()
			TP_BUTTON_OFF(TP_MUTE)
		    }
		}
	    }
	}
    }
